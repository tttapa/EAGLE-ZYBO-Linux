#include <bitString.hpp>
#include <crypto.hpp>

CryptoInstruction decrypt(const std::vector<uint8_t> &qrCode) {
    std::vector<uint8_t> qrCodes[12] = {
        {0x5d, 0xa4, 0xa2, 0x8f, 0x6b, 0x13, 0x19, 0xe4, 0x77, 0x1c, 0x03, 0x00,
         0xf0, 0x00, 0x08, 0x07, 0x49, 0xae, 0x4d, 0x23, 0x88, 0x5e, 0x76, 0x07,
         0x46, 0x1b, 0xcd, 0x3c, 0xa9, 0xd1, 0x51, 0x07, 0x12, 0xc0, 0x77, 0x41,
         0xaa, 0xc6, 0x4e, 0x07, 0xfb, 0xe8, 0x58, 0xe9, 0xec, 0x0e, 0x21, 0x07,
         0x5e, 0xc8, 0xfa, 0x82, 0x77, 0x49, 0xfb, 0x07, 0x65, 0xac, 0x8b, 0xbf,
         0x4f, 0x3f, 0xdb, 0x07, 0xf9, 0x7d, 0x85, 0x18, 0x5c, 0x30, 0x50, 0x07,
         0x36, 0x15, 0xeb, 0x42, 0x50, 0x0e, 0xc1},

        {0x01, 0x7e, 0x51, 0x6e, 0x58, 0x61, 0xd4, 0x9a, 0x44, 0x25, 0x06, 0x02,
         0xf9, 0x00, 0x08, 0x07, 0xb8, 0x0f, 0xbe, 0xec, 0xd3, 0x31, 0xf5, 0x07,
         0x04, 0x29, 0x45, 0x21, 0xa5, 0x26, 0xf1, 0x07, 0x9d, 0x6b, 0x02, 0x13,
         0x32, 0x3d, 0x15, 0x07, 0x13, 0x09, 0xa4, 0x74, 0x31, 0x3d, 0x7c, 0x07,
         0x3d, 0xce, 0xbb, 0x26, 0x8a, 0x82, 0xf1, 0x07, 0x72, 0xe1, 0x7e, 0x4d,
         0x54, 0xa0, 0xfe, 0x07, 0xbf, 0x74, 0x63, 0x8b, 0x67, 0xf9, 0x5d, 0x07,
         0xc2, 0x5e, 0xfe, 0x63, 0xc2, 0x2d, 0x04},

        {0x53, 0x9d, 0x08, 0x8b, 0xc0, 0x13, 0xfe, 0x89, 0x96, 0x39, 0x04,
         0x04, 0xfc, 0x00, 0x08, 0x05, 0x86, 0xbb, 0x70, 0x46, 0x03, 0x05,
         0x86, 0x8a, 0xd7, 0x3d, 0x8a, 0x05, 0x10, 0x6b, 0x08, 0x54, 0x21,
         0x05, 0xe4, 0xf0, 0x4f, 0xc5, 0xa3, 0x05, 0x9e, 0xdd, 0xf4, 0xe9,
         0xe3, 0x05, 0x2d, 0x9c, 0x26, 0x39, 0x3e, 0x05, 0xb0, 0x99, 0x45,
         0xa6, 0xe3, 0x05, 0x91, 0x28, 0x23, 0xf2, 0x98},

        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x07, 0x04, 0x00, 0x02, 0x13,
         0xf9, 0x34, 0x5b, 0x49, 0x1e, 0xa1, 0xdf, 0xe2, 0x25, 0x8c, 0xbc,
         0x6d, 0xeb, 0x85, 0x01, 0x80, 0xf4, 0x9a, 0x3b, 0x13, 0xa1, 0x63,
         0x6a, 0xfb, 0x9b, 0xc3, 0x71, 0xbe, 0x99, 0x5d, 0x6e, 0x4e, 0xf5,
         0xe6, 0x25, 0xfa, 0x04, 0x21, 0x4e},

        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x0a, 0x05, 0x10, 0x0a, 0x00, 0x03, 0x11,
         0xaf, 0xd9, 0xcb, 0x3a, 0xfc, 0x0d, 0x4c, 0xf9, 0x51, 0x59, 0x31,
         0x53, 0x90, 0x64, 0x23, 0x0d, 0x21, 0x11, 0xe0, 0x8a, 0x22, 0x01,
         0x52, 0xfa, 0x3c, 0xbb, 0x96, 0xdb, 0x54, 0x9c, 0x77, 0x14, 0x07,
         0xe3, 0x6c, 0x11, 0x93, 0xf8, 0xeb, 0xff, 0x7b, 0x1e, 0xa2, 0x28,
         0xa0, 0x92, 0xc9, 0x96, 0x72, 0xae, 0xe0, 0xb6, 0x5b},

        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x07, 0x05, 0x0a, 0x07, 0x00, 0x03, 0x13, 0xac, 0xb2,
         0x81, 0x66, 0x59, 0xf2, 0x49, 0x96, 0xc5, 0x13, 0x35, 0x33, 0x07, 0xb5,
         0xc7, 0xcd, 0xc5, 0x3f, 0x60, 0x13, 0x14, 0xb4, 0x14, 0x9f, 0xe6, 0xda,
         0x38, 0x44, 0x1d, 0xef, 0xd8, 0x79, 0x1f, 0xc5, 0x8e, 0xc0, 0x5d, 0x9b,
         0x3f, 0x13, 0x83, 0x2a, 0x6e, 0x11, 0xb4, 0x42, 0xfd, 0x6d, 0xb5, 0xbc,
         0x44, 0x71, 0x03, 0xd8, 0x12, 0x18, 0x56, 0xf0, 0x8b},

        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x06, 0x05, 0x07, 0x06, 0x00, 0x03, 0x13, 0x4b, 0x55,
         0xd5, 0x6b, 0x68, 0x80, 0xc5, 0xc4, 0x46, 0x8c, 0x33, 0x57, 0x66, 0xf1,
         0xf7, 0xfe, 0x2e, 0xed, 0x85, 0x13, 0x34, 0x69, 0x27, 0x24, 0xdd, 0x91,
         0xb7, 0x3a, 0xbe, 0x76, 0x0c, 0xe5, 0x13, 0x8a, 0x84, 0x3b, 0x5d, 0x4d,
         0xd6, 0x13, 0xbf, 0x2a, 0x2b, 0xca, 0xa8, 0xa9, 0xdc, 0x56, 0x70, 0x8e,
         0x28, 0xd0, 0x57, 0x56, 0xc2, 0xe6, 0x29, 0x4e, 0xe9},

        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x09, 0x03, 0x0d, 0x09, 0x00, 0x02, 0x13,
         0x69, 0x62, 0xbf, 0xa0, 0x76, 0x04, 0x4c, 0xa2, 0xf7, 0xb9, 0xda,
         0xc5, 0x1c, 0x01, 0xfc, 0x93, 0xc1, 0x05, 0xa4, 0x13, 0xb9, 0x14,
         0xe3, 0x42, 0x62, 0x67, 0x87, 0x0b, 0x1c, 0x4f, 0x47, 0xd7, 0x5f,
         0xd9, 0x2b, 0xc2, 0x80, 0x8f, 0x8e},

        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x02, 0x07, 0x04, 0x02, 0x00, 0x02, 0x13,
         0x4e, 0x60, 0x00, 0x15, 0x9d, 0xe0, 0x30, 0x09, 0xce, 0xd0, 0x05,
         0x40, 0x17, 0x92, 0xeb, 0xc4, 0x34, 0xad, 0x0f, 0x13, 0x7b, 0x04,
         0xaa, 0xbc, 0x2a, 0x43, 0xc0, 0x29, 0xfb, 0x63, 0x8e, 0xc8, 0x18,
         0x9b, 0xf2, 0xa3, 0x4c, 0x00, 0x39},

        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x07, 0x04, 0x00, 0x02, 0x13,
         0xf9, 0x34, 0x5b, 0x49, 0x1e, 0xa1, 0xdf, 0xe2, 0x25, 0x8c, 0xbc,
         0x6d, 0xeb, 0x85, 0x01, 0x80, 0xf4, 0x9a, 0x3b, 0x13, 0xa1, 0x63,
         0x6a, 0xfb, 0x9b, 0xc3, 0x71, 0xbe, 0x99, 0x5d, 0x6e, 0x4e, 0xf5,
         0xe6, 0x25, 0xfa, 0x04, 0x21, 0x4e},

        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x0a, 0x05, 0x10, 0x0a, 0x00, 0x03, 0x11,
         0xaf, 0xd9, 0xcb, 0x3a, 0xfc, 0x0d, 0x4c, 0xf9, 0x51, 0x59, 0x31,
         0x53, 0x90, 0x64, 0x23, 0x0d, 0x21, 0x11, 0xe0, 0x8a, 0x22, 0x01,
         0x52, 0xfa, 0x3c, 0xbb, 0x96, 0xdb, 0x54, 0x9c, 0x77, 0x14, 0x07,
         0xe3, 0x6c, 0x11, 0x93, 0xf8, 0xeb, 0xff, 0x7b, 0x1e, 0xa2, 0x28,
         0xa0, 0x92, 0xc9, 0x96, 0x72, 0xae, 0xe0, 0xb6, 0x5b},

        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x02, 0x07, 0x04, 0x02, 0x00, 0x02, 0x13,
         0x4e, 0x60, 0x00, 0x15, 0x9d, 0xe0, 0x30, 0x09, 0xce, 0xd0, 0x05,
         0x40, 0x17, 0x92, 0xeb, 0xc4, 0x34, 0xad, 0x0f, 0x13, 0x7b, 0x04,
         0xaa, 0xbc, 0x2a, 0x43, 0xc0, 0x29, 0xfb, 0x63, 0x8e, 0xc8, 0x18,
         0x9b, 0xf2, 0xa3, 0x4c, 0x00, 0x39}};

    CryptoInstruction instructions[12] = {
        CryptoInstruction(CryptoInstruction::GOTO, 6, 2),
        CryptoInstruction(CryptoInstruction::GOTO, 4, 4),
        CryptoInstruction(CryptoInstruction::LAND),
        CryptoInstruction(CryptoInstruction::GOTO, 8, 6),
        CryptoInstruction(CryptoInstruction::GOTO, 3, 1),
        CryptoInstruction(CryptoInstruction::LAND),
        CryptoInstruction(CryptoInstruction::GOTO, 1, 1),
        CryptoInstruction(CryptoInstruction::GOTO, 5, 8),
        CryptoInstruction(CryptoInstruction::GOTO, 7, 3),
        CryptoInstruction(CryptoInstruction::GOTO, 5, 4),
        CryptoInstruction(CryptoInstruction::LAND),
        CryptoInstruction(CryptoInstruction::GOTO, 2, 3)};

    for (int8_t i = 0; i < 12; i++)
        if (qrCode == qrCodes[i])
            return instructions[i];

    throw CryptoException(
        CryptoException::ExceptionType::UNSUCCESSFUL_DECODE_EXCEPTION);

    //SOFTWARE

    //TODO: DMKEY uit bestand lezen.
    /*
       BitString dmKey;
       BitString nonce(qrCode, 0, 10);
       BitString wx(qrCode, 10,11);
       BitString wy(qrCode,11,12);
       BitString wid(qrCode, 12,14);
       BitString ad (qrCode, 10,15);
       BitString keyMaterial(dmKey);
       keyMaterial.concatenate(wx).concatenate(wy).concatenate(wid);
       int nbInstruction = (int) qrCode[14];

       int currentIndex = 15;

       hash(0,0,keyMaterial,96/8);
       */
}