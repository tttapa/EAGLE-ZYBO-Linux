#ifndef LOGGER_H
#define LOGGER_H

#ifdef __cplusplus
#include <algorithm> // copy
#include <cstdint>   // uint32_t, int32_t
#include <iterator>  // begin, end

$typedefs
#else
#include <stdint.h> // uint32_t, int32_t
#endif

/**
 * @brief   A struct for encapsulating all logging data. It has Python bindings,
 *          so it can be used with the GUI directly.
 * 
 * @note    This function is automatically generated by 
 *          `src/logentry/codegen/Codegen.py`.  
 *          Don't edit this file directly, edit the template instead: 
 *          `src/logentry/templates/LogEntry.template.h`.
 */
#ifdef __cplusplus
struct LogEntry {
    LogEntry() : size(getExpectedNumberOfWords()) {}

$members
    constexpr static size_t getExpectedNumberOfWords() { return $size; }
$cpp_methods
};
#else
typedef struct {

$members
} LogEntry;
#endif

#if !defined(__cplusplus) || defined(LOGGER_INCLUDE_C_WRAPPERS)
#ifdef __cplusplus
extern "C" {
#endif

$c_prototypes
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
static_assert(sizeof(LogEntry) == sizeof(float) * $size, 
              "Error: packing of LogEntry is incorrect");
#else
_Static_assert(sizeof(LogEntry) == sizeof(float) * $size, 
              "Error: packing of LogEntry is incorrect");
#endif

#endif  // LOGGER_H
