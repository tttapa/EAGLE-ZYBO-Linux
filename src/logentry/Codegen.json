{
    "structs": {
        "AttitudeState": {
            "documentation": [
                "Estimate of the state of the drone's attitude, consisting of",
                "the drone's orientation (1 quaternion q), angular velocity in",
                "rad/s (3 components: wx, wy, wz) and the angular velocity of",
                "the torque motors in rad/s (3 components: nx, ny, nz)."
            ],
            "members": {
                "q": {
                    "type": "Quaternion",
                    "default": "Quaternion::unit()",
                    "documentation": "The orientation of the drone"
                },
                "w": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": "The angular velocity of the drone"
                },
                "n": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": "The angular velocity of the motors"
                }
            },
            "logger": {
                "attitudeObserverState": {
                    "value": "attitudeController.getStateEstimate()"
                }
            }
        },
        "AttitudeControlSignal": {
            "documentation": [
                "PWM control signals sent to the torque motors",
                "(3 components: ux, uy, uz)."
            ],
            "members": {
                "u": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": "Motor signal."
                }
            },
            "logger": {
                "attitudeControlSignals": {
                    "value": "attitudeController.getControlSignal()"
                }
            }
        },
        "AttitudeReference": {
            "documentation": [
                "Attitude reference to track, consisting of a single quaternion."
            ],
            "members": {
                "q": {
                    "type": "Quaternion",
                    "default": "Quaternion::unit()",
                    "documentation": "Reference orientation."
                }
            },
            "logger": {
                "referenceOrientation": {
                    "value": "attitudeController.getReferenceQuat()"
                }
            }
        },
        "AltitudeState": {
            "documentation": [
                "Estimate of the state of the drone's altitude, consisting three",
                "components. First is a float representing the marginal angular",
                "velocity of the 'common motor', relative to the hovering angular",
                "velocity. This value is measured in rad/s. Next is a float",
                "representing the height of the drone, measured in meters.",
                "Finally is a float representing the vertical velocity of the",
                "drone, measured in m/s."
            ],
            "members": {
                "nt": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": "Common motor marginal angular velocity (rad/s)"
                },
                "z": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": "The height (m) of the drone"
                },
                "vz": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": "Velocity (m/s) of the drone"
                }
            },
            "logger": {
                "altitudeObserverState": {
                    "value": "altitudeController.getStateEstimate()"
                }
            }
        },
        "AltitudeControlSignal": {
            "documentation": [
                "Marginal PWM control signal sent to the common motor."
            ],
            "members": {
                "ut": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": "Common motor marginal signal."
                }
            },
            "logger": {
                "altitudeControlSignal": {
                    "value": "altitudeController.getControlSignal().ut"
                }
            }
        },
        "AltitudeReference": {
            "documentation": [
                "Altitude reference height to track, consisting of a single float."
            ],
            "members": {
                "z": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": "Reference height."
                }
            },
            "logger": {
                "referenceHeight": {
                    "value": "altitudeController.getReferenceHeight()"
                }
            }
        },
        "PositionState": {
            "documentation": [
                "Estimate of the state of the drone's position, consisting six",
                "components. The first two floats are the quaternion components",
                "q1 and q2. The next two floats represent the drone's global",
                "position, measured in meters. Finally, two floats represent",
                "the horizontal velocity of the drone in m/s."
            ],
            "members": {
                "q": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": "Orientation q1 and q2 component (/)."
                },
                "p": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": "Position (x,y) in meters."
                },
                "v": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": "Velocity (m/s)."
                }
            },
            "logger": {
                "navigationObserverState": {
                    "value": "positionController.getStateEstimate()"
                }
            }
        },
        "PositionControlSignal": {
            "documentation": [
                "Reference quaternion components q1 and q2 that will be sent to",
                "the attitude controller."
            ],
            "members": {
                "q": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": "Reference orientation q1 and q2 component."
                }
            },
            "logger": {
                "positionControlSignal": {
                    "value": "positionController.getControlSignal()"
                }
            }
        },
        "PositionReference": {
            "documentation": [
                "Position (x,y) reference to track, consisting of a position.",
                "This value is measured in meters."
            ],
            "members": {
                "p": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": "Reference position."
                }
            },
            "logger": {
                "referenceLocation": {
                    "value": "positionController.(getReferencePosition)()",
                    "documentation": "The reference for the position controller"
                }
            }
        }
    },
    "enums": {
        "FlightMode": {
            "documentation": [
                "Struct containing the four different flight modes. First, the",
                "drone begins in the UNINITIALIZED flight mode. After the",
                "first cycle, the drone will enter the current flight mode, as",
                "specified by the RC. In MANUAL_MODE, the pilot has full",
                "control over the drone's orientation and the common thrust.",
                "In ALTITUDE_HOLD_MODE, the pilot still has control over the ",
                "drone's orientation, but the altitude controller takes over",
                "the common thrust in order to keep the drone at a constant",
                "height. Finally, in AUTONOMOUS_MODE, the pilot has no control",
                "over the attitude or altitude of the drone. The drone will",
                "navigate autonomously to successive QR codes and land at its",
                "final code. As a safety precaution, if the pilot sets the",
                "throttle to zero during the autonomous flight, the drone will",
                "land at its current location."
            ],
            "values": {
                "UNINITIALIZED": {
                    "value": "0",
                    "documentation": [
                        "The drone is in its first clock cycle and has not yet",
                        "entered a flight mode."
                    ]
                },
                "MANUAL": {
                    "value": "1",
                    "documentation": [
                        "The drone is in \"manual mode\". The pilot has",
                        "control over the drone's orientation and the common",
                        "thrust."
                    ]
                },
                "ALTITUDE_HOLD": {
                    "value": "2",
                    "documentation": [
                        "The drone is in \"altitude-hold mode\". The pilot has",
                        "control over drone's orientation, but the altitude",
                        "controller takes over the common thrust in order to",
                        "keep the drone at a constant altitude."
                    ]
                },
                "AUTONOMOUS": {
                    "value": "3",
                    "documentation": [
                        "The drone is in \"autonomous mode\". The pilot has no",
                        "control over the attitude or altitude of the drone.",
                        "If the drone is grounded when entering this flight",
                        "mode, then it will take off as soon as the pilot",
                        "raises the throttle above the predetermined threshold",
                        "(see Autonomous.hpp). If the drone was already",
                        "airborne when entering this flight mode, then this",
                        "step will be skipped. Then, the drone will loiter at",
                        "its current position for a predetermined time (see",
                        "Autonomous.hpp). After that, it will navigate",
                        "autonomously to successive QR codes and finally land",
                        "at its final code. As a safety precaution, if the",
                        "pilot sets the throttle to zero during the autonomous",
                        "flight, the drone will land at its current location."
                    ]
                }
            },
            "logger": {
                "mode": {
                    "value": "getMode()",
                    "documentation": "The flight mode of the drone"
                }
            }
        }
    },
    "others": {
        "frametime": {
            "type": "uint64_t",
            "documentation": "The time since startup in milliseconds",
            "value": "getFrameTime()"
        }
    }
}