{
    "structs": {
        "AltitudeControlSignal": {
            "documentation": [
                "Marginal PWM control signal sent to the 'common motor'",
                "(float)."
            ],
            "members": {
                "ut": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "'Common motor' marginal signal."
                    ]
                }
            },
            "logger": {
                "altitudeControlSignal": {
                    "value": "altitudeController.getControlSignal()",
                    "documentation": [
                        "The altitude controller's control signal."
                    ]
                }
            }
        },
        "AltitudeIntegralWindup": {
            "documentation": [
                "Integral of the error of the height of the drone in meters."
            ],
            "members": {
                "z": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Integral of the height estimate in meters."
                    ]
                }
            },
            "logger": {
                "altitudeIntegralWindup": {
                    "value": "altitudeController.getIntegralWindup()",
                    "documentation": [
                        "The altitude controller's integral windup."
                    ]
                }
            }
        },
        "AltitudeMeasurement": {
            "documentation": [
                "Measurement of the drone height by the sonar in meters,",
                "corrected for the tilt of the drone, represented by a float."
            ],
            "members": {
                "z": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Measurement height in meters."
                    ]
                }
            },
            "logger": {
                "altitudeMeasurement": {
                    "value": "altitudeController.getMeasurement()",
                    "documentation": [
                        "The altitude controller's measurement."
                    ]
                }
            }
        },
        "AltitudeReference": {
            "documentation": [
                "Reference height to track in meters, represented by a float."
            ],
            "members": {
                "z": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Reference height in meters."
                    ]
                }
            },
            "logger": {
                "altitudeReference": {
                    "value": "altitudeController.getReference()",
                    "documentation": [
                        "The altitude controller's reference."
                    ]
                }
            }
        },
        "AltitudeState": {
            "documentation": [
                "Estimate of the altitude state, consisting of the marginal",
                "angular velocity of the 'common motor' in rad/s (float), the",
                "height of the drone in meters (float) and the vertical",
                "velocity of the drone in m/s (float)."
            ],
            "members": {
                "nt": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "'Common motor' marginal angular velocity in rad/s."
                    ]
                },
                "z": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Height of the drone in meters."
                    ]
                },
                "vz": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Vertical velocity of the drone in m/s."
                    ]
                }
            },
            "logger": {
                "altitudeStateEstimate": {
                    "value": "altitudeController.getStateEstimate()",
                    "documentation": [
                        "The altitude controller's state estimate."
                    ]
                }
            }
        },
        "AttitudeControlSignal": {
            "documentation": [
                "PWM control signals sent to the 'torque motors', consisting",
                "of a Vec3f. Each component will be sent to a different",
                "'torque motor'."
            ],
            "members": {
                "uxyz": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": [
                        "Signal sent to the 'torque motors'."
                    ]
                }
            },
            "logger": {
                "attitudeControlSignal": {
                    "value": "attitudeController.getControlSignal()",
                    "documentation": [
                        "The attitude controller's control signal."
                    ]
                }
            }
        },
        "AttitudeIntegralWindup": {
            "documentation": [
                "Integral of the error of the quaternion components q1, q2 and",
                "q3, represented by a Vec3f."
            ],
            "members": {
                "q123": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": [
                        "Integral of the error of the quaternion components q1",
                        "q2 and q3."
                    ]
                }
            },
            "logger": {
                "attitudeIntegralWindup": {
                    "value": "attitudeController.getIntegralWindup()",
                    "documentation": [
                        "The attitude controller's integral windup."
                    ]
                }
            }
        },
        "AttitudeMeasurement": {
            "documentation": [
                "Measurement from the IMU, consisting of a quaternion for the",
                "drone's orientation and a Vec3f for the drone's angular",
                "velocity, measured in rad/s."
            ],
            "members": {
                "q": {
                    "type": "Quaternion",
                    "default": "Quaternion::unit()",
                    "documentation": [
                        "Measurement orientation from the IMU."
                    ]
                },
                "w": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": [
                        "Measurement angular velocity from the IMU."
                    ]
                }
            },
            "logger": {
                "attitudeMeasurement": {
                    "value": "attitudeController.getMeasurement()",
                    "documentation": [
                        "The attitude controller's measurement."
                    ]
                }
            }
        },
        "AttitudeReference": {
            "documentation": [
                "Reference orientation to track, represented by a quaternion."
            ],
            "members": {
                "q": {
                    "type": "Quaternion",
                    "default": "Quaternion::unit()",
                    "documentation": "Reference orientation."
                }
            },
            "logger": {
                "attitudeReference": {
                    "value": "attitudeController.getReference()",
                    "documentation": [
                        "The attitude controller's reference."
                    ]
                }
            }
        },
        "AttitudeState": {
            "documentation": [
                "Estimate of the attitude state, consisting of the drone's",
                "orientation (quaterion), angular velocity in rad/s (Vec3f)",
                "and the angular velocity of the 'torque motors' in rad/s",
                "(Vec3f)."
            ],
            "members": {
                "q": {
                    "type": "Quaternion",
                    "default": "Quaternion::unit()",
                    "documentation": [
                        "The orientation of the drone."
                    ]
                },
                "w": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": [
                        "The angular velocity of the drone in rad/s."
                    ]
                },
                "n": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": [
                        "The angular velocity of the 'torque motors' in rad/s."
                    ]
                }
            },
            "logger": {
                "attitudeStateEstimate": {
                    "value": "attitudeController.getStateEstimate()",
                    "documentation": [
                        "The attitude controller's state estimate."
                    ]
                }
            }
        },
        "PositionControlSignal": {
            "documentation": [
                "Reference quaternion components q1 and q2 that will be sent",
                "to the attitude controller, represented by a Vec2f."
            ],
            "members": {
                "q12ref": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": [
                        "Reference orientation, q1 and q2 components."
                    ]
                }
            },
            "logger": {
                "positionControlSignal": {
                    "value": "positionController.getControlSignal()",
                    "documentation": [
                        "The position controller's control signal."
                    ]
                }
            }
        },
        "PositionIntegralWindup": {
            "documentation": [
                "Integral of the error of the position in meters, represented",
                "by a Vec2f."
            ],
            "members": {
                "p": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": [
                        "Integral of the position in meters."
                    ]
                }
            },
            "logger": {
                "positionIntegralWindup": {
                    "value": "positionController.getIntegralWindup()",
                    "documentation": [
                        "The position controller's integral windup."
                    ]
                }
            }
        },
        "PositionMeasurement": {
            "documentation": [
                "Measurement of the position in meters, represented by a Vec2f."
            ],
            "members": {
                "p": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": [
                        "Measurement position in meters."
                    ]
                }
            },
            "logger": {
                "referenceLocation": {
                    "value": "positionController.getMeasurement()",
                    "documentation": [
                        "The position controller's measurement."
                    ]
                }
            }
        },
        "PositionReference": {
            "documentation": [
                "Reference position to track in meters, represented by a Vec2f."
            ],
            "members": {
                "p": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": [
                        "Reference position in meters."
                    ]
                }
            },
            "logger": {
                "positionReference": {
                    "value": "positionController.getReference()",
                    "documentation": [
                        "The position controller's reference."
                    ]
                }
            }
        },
        "PositionState": {
            "documentation": [
                "Estimate of the position state, consisting of the quaternion",
                "components q1 and q2 (Vec2f), the global position of the",
                "drone in meters (Vec2f) and the horizontal velocity of the",
                "drone in m/s (Vec2f)."
            ],
            "members": {
                "q": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": [
                        "Drone orientation, q1 and q2 components."
                    ]
                },
                "p": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": [
                        "Position of the drone in meters."
                    ]
                },
                "v": {
                    "type": "Vec2f",
                    "default": "{0.0, 0.0}",
                    "documentation": [
                        "Horizontal velocity of the drone in m/s."
                    ]
                }
            },
            "logger": {
                "positionStateEstimate": {
                    "value": "positionController.getStateEstimate()",
                    "documentation": [
                        "The position controller's state estimate."
                    ]
                }
            }
        },
        "AutonomousOutput": {
            "documentation": [
                "Output of the autonomous control system, which contains",
                "information about whether the altitude/position controllers",
                "should be used and whether their observers should be updated.",
                "If the controller(s) should be bypassed, the struct also",
                "contains signals to pass to the next part of the code.",
                "Finally, if the position controller should be updated, should",
                "it use IMP's measurement or data from the accelerometer to",
                "determine the position of the drone?"
            ],
            "members": {
                "useAltitudeController": {
                    "type": "bool",
                    "default": "false",
                    "documentation": [
                        "Whether the altitude controller should be used. If",
                        "this is false, then this AutonomousOutput's",
                        "commonThrust should be used instead of the altitude",
                        "controller's common thrust."
                    ]
                },
                "referenceHeight": {
                    "type": "AltitudeReference",
                    "default": "{}",
                    "documentation": [
                        "Reference height to be sent to the altitude",
                        "controller, if it is not bypassed."
                    ]
                },
                "commonThrust": {
                    "type": "AltitudeControlSignal",
                    "default": "{}",
                    "documentation": [
                        "Control signal to send to the 'common motor' if the",
                        "altitude controller is bypassed."
                    ]
                },
                "updateAltitudeObserver": {
                    "type": "bool",
                    "default": "false",
                    "documentation": [
                        "Whether the altitude observer should be updated."
                    ]
                },
                "usePositionController": {
                    "type": "bool",
                    "default": "false",
                    "documentation": [
                        "Whether the position controller should be used. If",
                        "this is false, then this AutonomousOutput's reference",
                        "orientation should be used instead of the position",
                        "controller's reference orientation."
                    ]
                },
                "referencePosition": {
                    "type": "PositionReference",
                    "default": "{}",
                    "documentation": [
                        "Reference position to be sent to the position",
                        "controller, if it is not bypassed."
                    ]
                },
                "q12ref": {
                    "type": "PositionControlSignal",
                    "default": "{}",
                    "documentation": [
                        "Control signal to send to the attitude controller, if",
                        "the position controller is bypassed."
                    ]
                },
                "updatePositionObserver": {
                    "type": "bool",
                    "default": "false",
                    "documentation": [
                        "Whether the position observer should be updated."
                    ]
                },
                "trustIMPForPosition": {
                    "type": "bool",
                    "default": "false",
                    "documentation": [
                        "If this is true, then the drone should trust IMP's",
                        "measurement to determine the position of the drone.",
                        "Otherwise, it will use the accelerometer's ax and ay",
                        "data to determine the position, according to the",
                        "mathematical model."
                    ]
                }
            },
            "logger": {
                "autonomousOutput": {
                    "value": "autonomousController.getOutput()",
                    "documentation": [
                        "The autonomous controller's output."
                    ]
                }
            }
        },
        "AccelMeasurement": {
            "documentation": [
                "Accelerometer measurement acceleration in g (Vec3f)."
            ],
            "members": {
                "a": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": [
                        "Accelerometer measurement of the acceleration in g."
                    ]
                }
            }
        },
        "GyroMeasurement": {
            "documentation": [
                "Gyroscope measurement angular velocity in rad/s (Vec3f)."
            ],
            "members": {
                "g": {
                    "type": "Vec3f",
                    "default": "{0.0, 0.0, 0.0}",
                    "documentation": [
                        "Gyroscope measurement of the angular velocity in",
                        "rad/s."
                    ]
                }
            }
        },
        "IMUMeasurement": {
            "documentation": [
                "IMU measurement angular velocity in rad/s (Vec3f) and",
                "acceleration in g (Vec3f)."
            ],
            "members": {
                "gyro": {
                    "type": "GyroMeasurement",
                    "default": "{}",
                    "documentation": [
                        "Gyroscope measurement of the angular velocity in",
                        "rad/s."
                    ]
                },
                "accel": {
                    "type": "AccelMeasurement",
                    "default": "{}",
                    "documentation": [
                        "Accelerometer measurement of the acceleration in g."
                    ]
                }
            },
            "logger": {
                "imuMeasurement": {
                    "comment": "This value is set in IMU.cpp.",
                    "documentation": [
                        "The IMU's measurement."
                    ]
                }
            }
        },
        "RCInput": {
            "documentation": [
                "Struct containing the values from the RC transmitter. This",
                "includes the value of the throttle, which ranges from 0 to 1.",
                "It also contains the values of the roll, pitch, yaw and tuner",
                "knob, which range from -1 to +1. Lastly, there are switches",
                "for the flight mode and the wireless power transfer. These",
                "are represented by their respective enumerations."
            ],
            "members": {
                "throttle": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Value of the RC throttle in [0, 1]."
                    ]
                },
                "roll": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Value of the RC roll in [-1, 1]."
                    ]
                },
                "pitch": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Value of the RC pitch in [-1, 1]."
                    ]
                },
                "yaw": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Value of the RC yaw in [-1, 1]."
                    ]
                },
                "tuner": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Value of the RC tuner knob in [-1, 1]."
                    ]
                },
                "flightMode": {
                    "type": "FlightMode",
                    "default": "FlightMode::UNINITIALIZED",
                    "documentation": [
                        "Value of the RC flight mode (as a FlightMode)."
                    ]
                },
                "wptMode": {
                    "type": "WPTMode",
                    "default": "WPTMode::OFF",
                    "documentation": [
                        "Value of the RC WPT mode (as a WPTMode)."
                    ]
                }
            },
            "logger": {
                "rcInput": {
                    "value": "getRCInput()",
                    "documentation": [
                        "The most recent reading of the RC."
                    ]
                }
            }
        },
        "BuzzerInstruction": {
            "documentation": [
                "Instruction to be sent to the buzzer containing a duration in",
                "seconds (float), a buzzer period in ? (int) and a buzzer",
                "volume in ? (int)."
            ],
            "members": {
                "duration": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Duration of the instruction in seconds."
                    ]
                },
                "period": {
                    "type": "int",
                    "default": "0",
                    "documentation": [
                        "Period of sound, represented as an integer."
                    ]
                },
                "volume": {
                    "type": "int",
                    "default": "0",
                    "documentation": [
                        "Volume of sound, represented as an integer."
                    ]
                }
            },
            "logger": {
                "buzzerInstruction": {
                    "value": "buzzerManager.getCurrentInstruction()",
                    "documentation": [
                        "The current instruction playing on the buzzer."
                    ]
                }
            }
        },
        "LEDInstruction": {
            "documentation": [
                "Instruction to be sent to the LEDs, containing four booleans,",
                "representing whether each of the four LEDs should be lit."
            ],
            "members": {
                "led1": {
                    "type": "bool",
                    "default": "false",
                    "documentation": [
                        "Whether the first LED should be lit."
                    ]
                },
                "led2": {
                    "type": "bool",
                    "default": "false",
                    "documentation": [
                        "Whether the second LED should be lit."
                    ]
                },
                "led3": {
                    "type": "bool",
                    "default": "false",
                    "documentation": [
                        "Whether the third LED should be lit."
                    ]
                },
                "led4": {
                    "type": "bool",
                    "default": "false",
                    "documentation": [
                        "Whether the fourth LED should be lit."
                    ]
                }
            },
            "logger": {
                "ledInstruction": {
                    "comment": "This value is set in MainInterrupt.cpp.",
                    "documentation": [
                        "The current instruction displayed on the LEDs."
                    ]
                }
            }
        },
        "MotorSignals": {
            "documentation": [
                "Four floats representing the duty cycles to be sent to the",
                "four motors (front-left, front-right, back-left, back-right).",
                "These four must be in the interval [0.0, 1.0]."
            ],
            "members": {
                "v0": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Front-left motor duty cycle in [0.0, 1.0]."
                    ]
                },
                "v1": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Front-right motor duty cycle in [0.0, 1.0]."
                    ]
                },
                "v2": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Back-left motor duty cycle in [0.0, 1.0]."
                    ]
                },
                "v3": {
                    "type": "real_t",
                    "default": "0.0",
                    "documentation": [
                        "Back-right motor duty cycle in [0.0, 1.0]."
                    ]
                }
            },
            "logger": {
                "motorSignals": {
                    "comment": "This value is set in MainInterrupt.cpp.",
                    "documentation": [
                        "The signal sent to the four motors (ESCs)."
                    ]
                }
            }
        }
    },
    "enums": {
        "FlightMode": {
            "documentation": [
                "Enumeration containing the four different flight modes.",
                "First, the drone begins in the UNINITIALIZED flight mode.",
                "After the first cycle, the drone will enter the current",
                "flight mode, as specified by the RC. In MANUAL_MODE, the",
                "pilot has full control over the drone's orientation and the",
                "common thrust. In ALTITUDE_HOLD_MODE, the pilot still has",
                "control over the drone's orientation, but the altitude",
                "controller takes over the common thrust in order to keep the",
                "drone at a constant height. Finally, in AUTONOMOUS_MODE, the",
                "pilot has no control over the attitude or altitude of the",
                "drone. The drone will navigate autonomously to successive QR",
                "codes and land at its final code. As a safety precaution,",
                "if the pilot sets the throttle to zero during the autonomous",
                "flight, the drone will land at its current location."
            ],
            "values": {
                "UNINITIALIZED": {
                    "value": "0",
                    "documentation": [
                        "The drone is in its first clock cycle and has not yet",
                        "entered a flight mode."
                    ]
                },
                "MANUAL": {
                    "value": "1",
                    "documentation": [
                        "The drone is in MANUAL mode. The pilot has control",
                        "over the drone's orientation and the common thrust."
                    ]
                },
                "ALTITUDE_HOLD": {
                    "value": "2",
                    "documentation": [
                        "The drone is in ALTITUDE-HOLD mode. The pilot has",
                        "control over drone's orientation, but the altitude",
                        "controller takes over the common thrust in order to",
                        "keep the drone at a constant altitude."
                    ]
                },
                "AUTONOMOUS": {
                    "value": "3",
                    "documentation": [
                        "The drone is in AUTONOMOUS mode. The pilot has no",
                        "control over the attitude or altitude of the drone.",
                        "If the drone is grounded when entering this flight",
                        "mode, then it will take off as soon as the pilot",
                        "raises the throttle above 50%. If the drone was",
                        "already airborne when entering this flight mode, then",
                        "this step will be skipped. Then, the drone will",
                        "loiter at its current position for 15 seconds. After",
                        "that,it will navigate autonomously to successive QR",
                        "codes and finally land at its final code. As a safety",
                        "precaution, if the pilot sets the throttle to zero",
                        "during the autonomous flight, the drone will land at",
                        "its current location. See Autonomous.hpp for more",
                        "details."
                    ]
                }
            },
            "logger": {
                "flightMode": {
                    "comment": "This is set in MainInterrupt.cpp.",
                    "documentation": "The flight mode of the drone."
                }
            }
        },
        "WPTMode": {
            "documentation": [
                "Enumeration containing the two states of wireless power",
                "transfer, namely OFF and ON. However, wireless power transfer",
                "cannot be initiated at any time. Only if the drone is in",
                "MANUAL mode or if it is grounded in AUTONOMOUS mode with zero",
                "thrust."
            ],
            "values": {
                "OFF": {
                    "value": "0",
                    "documentation": [
                        "Wireless power transfer (WPT) is off."
                    ]
                },
                "ON": {
                    "value": "1",
                    "documentation": [
                        "Wireless power transfer (WPT) is on."
                    ]
                }
            },
            "logger": {
                "wptMode": {
                    "comment": "This is set in MainInterrupt.cpp.",
                    "documentation": "The WPT mode of the drone."
                }
            }
        }
    },
    "others": {
        "millis": {
            "type": "uint64_t",
            "documentation": [
                "Time since startup in milliseconds."
            ],
            "value": "getMillis()"
        },
        "tickCount": {
            "type": "uint32_t",
            "documentation": [
                "IMU tick count since startup."
            ],
            "value": "getTickCount()"
        },
        "time": {
            "type": "real_t",
            "documentation": [
                "Time since startup in seconds, calculated using",
                "getTickCount()."
            ],
            "value": "getTime()"
        }
    },
    "includes": [
        "ControllerInstances.hpp",
        "Matrix.hpp",
        "MiscInstances.hpp",
        "RCValues.hpp",
        "Time.hpp"
    ]
}