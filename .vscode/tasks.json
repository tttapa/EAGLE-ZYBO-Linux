// https://medium.com/@aharon.amir/develop-c-on-docker-with-vscode-98fb85b818b2
{
    "version": "2.0.0",
    "tasks": [
        //#region Running Docker................................................
        {
            "label": "Start Docker Container",
            "type": "shell",
            "command": "docker-compose run --service-ports --name crypto-devenv dev-image bash",
            "options": {
                "cwd": "${workspaceFolder}/docker/linux"
            },
            "windows": {
                "options": {
                    "cwd": "${workspaceFolder}/docker/windows"
                },
            },
            "problemMatcher": [],
            "dependsOn": "Stop Docker Container", // Restart if already running
            "runOptions": {
                "runOn": "folderOpen" // Run the container every time this folder is opened
            },
            "presentation": {
                "echo": false,
                "reveal": "silent",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            }
        },
        {
            "label": "Stop Docker Container",
            "type": "shell",
            "command": "docker-compose down",
            "options": {
                "cwd": "${workspaceFolder}/docker/linux"
            },
            "windows": {
                "options": {
                    "cwd": "${workspaceFolder}/docker/windows"
                },
            },
            "problemMatcher": [],
            "presentation": {
                "echo": false,
                "reveal": "silent",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            }
        },
        //#endregion
        //#region Building Docker...............................................
        {
            "label": "Build Docker Image",
            "type": "shell",
            "command": "docker-compose build --build-arg WORKSPACE_ROOT=${workspaceFolder} dev-image",
            "options": {
                "cwd": "docker/linux"
            },
            "windows": {
                "command": "docker-compose build dev-image",
                "options": {
                    "cwd": "docker/windows"
                },
            },
            "problemMatcher": []
        },
        {
            "label": "Build Docker Image (Toolchain)",
            "type": "shell",
            "command": "docker-compose build toolchain",
            "options": {
                "cwd": "docker/toolchain"
            },
            "problemMatcher": []
        },
        //#endregion
        //#region CMake.........................................................
        {
            "label": "Run CMake x86-64 (Docker)",
            "type": "shell",
            "command": "docker exec -it -w  ${workspaceFolder}/build crypto-devenv cmake ..",
            "windows": {
                "command": "docker exec -it -w  /home/develop/eagle/build crypto-devenv sh -c 'cmake ..'",
            },
            "problemMatcher": [],
        },
        {
            "label": "Run CMake ARMv7 ZYBO (Docker)",
            "type": "shell",
            "command": "docker exec -it -w ${workspaceFolder}/build-arm crypto-devenv cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-ARMv7-ZYBO.cmake ..",
            "windows": {
                "command": "docker exec -it -w /home/develop/eagle/build-arm crypto-devenv sh -c 'cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-ARMv7-ZYBO.cmake ..'",
            },
            "problemMatcher": [],
        },
        {
            "label": "Run CMake x86-64 (Local)",
            "type": "shell",
            "command": "cmake ..",
            "options": {
                "cwd": "${workspaceFolder}/build"
            },
            "problemMatcher": [],
        },
        //#endregion
        //#region Building......................................................
        {
            "label": "Build All x86-64 (Docker)",
            "type": "shell",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "command": "docker exec -it -w  ${workspaceFolder}/build crypto-devenv make -j$(nproc)",
            "windows": {
                "command": "docker exec -it -w /home/develop/eagle/build crypto-devenv sh -c 'make -j $(nproc)'",
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "Build All ARMv7 ZYBO (Docker)",
            "type": "shell",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "command": "docker exec -it -w  ${workspaceFolder}/build-arm crypto-devenv make -j$(nproc)",
            "windows": {
                "command": "docker exec -it -w /home/develop/eagle/build-arm crypto-devenv sh -c 'make -j $(nproc)'",
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "Build All x86-64 (Local)",
            "type": "shell",
            "command": "make -j$(nproc)",
            "options": {
                "cwd": "${workspaceFolder}/build"
            },
            "problemMatcher": "$gcc"
        },
        //#endregion
        //#region Running.......................................................
        {
            "label": "Run Tests (Docker)",
            "type": "shell",
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "command": "docker exec -it -w ${workspaceFolder}/build crypto-devenv sh -c 'make -j$(nproc) && make test'",
            "windows": {
                "command": "docker exec -it -w /home/develop/eagle/build crypto-devenv sh -c 'make -j$(nproc) && make test'",
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "Run Tests (Local)",
            "type": "shell",
            "command": "make -j$(nproc) && make test",
            "options": {
                "cwd": "${workspaceFolder}/build"
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "Run Application (Docker)",
            "type": "shell",
            "command": "docker exec -it crypto-devenv ${workspaceFolder}/build/bin/hello-world",
            "windows": {
                "command": "docker exec -it crypto-devenv /home/develop/eagle/build/bin/hello-world",
            },
            "problemMatcher": []
        },
        {
            "label": "Stop Application (Docker)",
            "type": "shell",
            "command": "docker exec -d crypto-devenv pkill hello-world",
            "problemMatcher": []
        },
        {
            "label": "Run Application (Local)",
            "type": "shell",
            "command": "./hello-world",
            "options": {
                "cwd": "${workspaceFolder}/build/bin"
            },
            "problemMatcher": []
        },
        //#endregion
        //#region Cleaning up...................................................
        {
            "label": "Make Clean x86-64 (Docker)",
            "type": "shell",
            "command": "docker exec -it -w ${workspaceFolder}/build crypto-devenv make clean",
            "windows": {
                "command": "docker exec -it -w /home/develop/eagle/build crypto-devenv sh -c 'make clean'",
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "Make Clean ARMv7 ZYBO (Docker)",
            "type": "shell",
            "command": "docker exec -it -w ${workspaceFolder}/build-arm crypto-devenv make clean",
            "windows": {
                "command": "docker exec -it -w /home/develop/eagle/build-arm crypto-devenv sh -c 'make clean'",
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "Make Clean x86-64 (Local)",
            "type": "shell",
            "command": "make clean",
            "options": {
                "cwd": "${workspaceFolder}/build"
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "Make Clean ARMv7 ZYBO (Local)",
            "type": "shell",
            "command": "make clean",
            "options": {
                "cwd": "${workspaceFolder}/build-arm"
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "Clear 'build' Directory x86-64",
            "type": "shell",
            "command": "find ${workspaceFolder}/build -type f -not -name '.gitignore' -print0 | xargs -0 rm --",
            "windows": {
                "command": "Remove-Item ${workspaceFolder}/build/ -Recurse -Exclude .gitignore"
            },
            "problemMatcher": []
        },
        {
            "label": "Clear 'build' Directory ARMv7 ZYBO",
            "type": "shell",
            "command": "find ${workspaceFolder}/build-arm -type f -not -name '.gitignore' -print0 | xargs -0 rm --",
            "windows": {
                "command": "Remove-Item ${workspaceFolder}/build-arm/ -Recurse -Exclude .gitignore"
            },
            "problemMatcher": []
        },
        //#endregion
        //#region Debugging.....................................................
        {
            "label": "Start GDB Server",
            "type": "shell",
            // not using -it so that it can be a preLaunchTask
            "command": "docker exec crypto-devenv gdbserver localhost:2000 ${workspaceRoot}/build/bin/hello-world",
            "windows": {
                "command": "docker exec crypto-devenv sh -c 'gdbserver localhost:2000 /home/develop/eagle/build/bin/hello-world'",
            },
            "problemMatcher": []
        },
        {
            "label": "Start GDB Server (Background)",
            "type": "shell",
            // not using -it so that it can be a preLaunchTask
            "command": "docker exec -d crypto-devenv gdbserver localhost:2000 ${workspaceRoot}/build/bin/hello-world",
            "windows": {
                "command": "docker exec -d crypto-devenv sh -c 'gdbserver localhost:2000 /home/develop/eagle/build/bin/hello-world'",
            },
            "problemMatcher": []
        },
        //#endregion
        //#region Documentation.................................................
        {
            "label": "Generate Documentation (Docker)",
            "type": "shell",
            "command": "rm -rf html && docker exec -w \"${workspaceFolder}/doc\" crypto-devenv doxygen && sensible-browser html/index.html",
            "windows": {
                "command": "rm html -r -fo; docker exec -w \"/home/develop/eagle/doc\" crypto-devenv doxygen; if($?) {Start-Process \"file://${workspaceFolder}/doc/html/index.html\"}",
            },
            "options": {
                "cwd": "${workspaceFolder}/doc"
            },
            "problemMatcher": []
        },
        {
            "label": "Generate Documentation (Local)",
            "type": "shell",
            "command": "rm -rf html && doxygen && sensible-browser html/index.html",
            "options": {
                "cwd": "${workspaceFolder}/doc"
            },
            "problemMatcher": []
        },
        //#endregion
    ]
}